//
//  main.cpp
//  Projeto
//

#include <stdio.h>
#include <iostream>
#include <string>
#include <opencv2/opencv.hpp>
#include "configs.h"
#include <dirent.h>
#include <glob.h>
#include <sys/stat.h>

using namespace std;
using namespace cv;

#include "StringUtils.hpp"
#include "DrawUtils.hpp"
#include "printUtils.h"
#include "prepareFrame.h"
#include "applyThreshold.h"
#include "prepareBlobDectection.h"
#include "calculateROIforCandidatePoint.h"
#include "myTimer.h"
#include "myTimerList.h"

int main(int argc, char* argv[]) {

	Mat image, img, imgHSV, imgGray;
    vector<myPoints> points, scanPoints;
    vector<String> filenames;

    size_t fileIndex;
    size_t blobIndex;    
    size_t skipCount = 0;

	// Select the dataset directory
	String folder;
	String rootFolder = "datasets/";

	// Dataset defined by user in argv[1], or default CURRENT_DATASET
	folder = (argc < 2) ? CURRENT_DATASET : (rootFolder + argv[1]);
  
	// Control Panel
    int trackerFrameLimit = TRACKER_FRAME_LIMIT;
    int visualAidsOn = true;
	int refreshRate = 500;

	// Tracking
    myPoints candidatePoint, trackedPoint;
    double distance;
    bool match;
    Point trackPoint;
    Rect trackRect;
    Mat trackImage;
    vector<myPoints> tempPoints;
    size_t cmpIndex, pointIndex;
	bool enableTracking = false;
	size_t trackerCount = 0;

	// Timer
	myTimer timer;
    
    // Define opencv windows.    
    namedWindow("Tracker ROI", WINDOW_AUTOSIZE);
	#ifdef DEBUG_WINDOWS
		namedWindow("Detected", WINDOW_AUTOSIZE);
		namedWindow("Tracker Cropped", WINDOW_AUTOSIZE);
		namedWindow("Tracker Cropped Processed", WINDOW_AUTOSIZE);
	#endif
    
    // Create control panel.
    namedWindow("Control Panel", WINDOW_AUTOSIZE);
    createTrackbar("Tracker Refresh Rate", 
				   "Control Panel", 
				   &trackerFrameLimit, 10, on_trackbar);

    createTrackbar("Visual Aids On", 
				   "Control Panel", 
				   &visualAidsOn, 1, on_trackbar);

	createTrackbar("General Refresh Rate", 
				   "Control Panel", 
				   &refreshRate, 500, on_trackbar);

    // Retrieve file paths from supplied dataset directory.
	DIR* dir = opendir(folder.c_str());
	if (!dir) {
		printf("Not a valid directory (%s)\n", folder.c_str());
		exit(-1);
	}
	closedir(dir);
	glob(folder, filenames);

	// Check if there are files in this folder
    if (filenames.size() == 0) {
        printf("No file found\n");
        exit(-1);
    }

    // Welcome message
    printf("\n*********************************************\n");
    printf("   Traffic Lights Detection and Recognition\n");
    printf("   v %s", VERSION_ID);
    printf("\n*********************************************\n\n");
    printf("> Floating point sanity test: 5/2 = %f\n", 5.0f/2.0f);
    printf("> %d files found in the dataset %s\n", filenames.size(), 
												   folder.c_str());
    printf("\n\n");

    // Loop through file paths.
    for (fileIndex = 0; fileIndex < filenames.size(); fileIndex++) {

		// Read image file from disk
		timer.startTimer("ReadFile");
        image = imread(filenames[fileIndex], CV_LOAD_IMAGE_COLOR);
		timer.stopTimer();

        if (!image.data) {
        	printf("No image data\n");
        	continue;
        }
            
        if (trackerCount++ >= trackerFrameLimit) {
            trackerCount = 0;
            enableTracking = false;
        }
        
        if (enableTracking == true) {

            // Analyse each ROI and compute candidate points inside it ---------
            for (pointIndex = 0; pointIndex < points.size(); pointIndex++) {

                // Calculate ROI around candidate point.
                candidatePoint = points[pointIndex];
				timer.startTimer("calculateROIforCandidate");
                trackRect = calculateROIforCandidatePoint(candidatePoint,
 														  image.size());
				timer.stopTimer();

                // Extract ROI from the original image.
                image(trackRect).copyTo(trackImage);

                // Prepare frame: crop, increase contrast, blue filter
				timer.startTimer("prepareFrame");
                prepareFrame(trackImage, img, imgGray, imgHSV,
							 IMAGE_HEIGHT_FACTOR, false);
				timer.stopTimer();

				// Adaptive Threshold
				timer.startTimer("applyTreshold");
                applyThreshold(imgGray, 1, 0);
				timer.stopTimer();

				// Calls blob detection
				timer.startTimer("prepareBlobDetection");
                prepareBlobDetection(img, imgHSV, imgGray, trackImage, 
									 fileIndex, &tempPoints);
				timer.stopTimer();

                
                // Analyse candidate points ------------------------------------
                if (tempPoints.size() > 0) {
                    
                    // Check if any candidate point matches the point that
					// generated the ROI.
					timer.startTimer("analyseCandidatePoints");
                    for (cmpIndex = 0, match = false; 
						cmpIndex < tempPoints.size() && match == false; 
						cmpIndex++) {

                    	// Translate the tracked point coordinates to the main
						// image.
                        trackedPoint = tempPoints[cmpIndex];
                        trackedPoint.x += trackRect.x;
                        trackedPoint.y += trackRect.y;

                        // Calculate distance between points.
                        distance = norm(
							Point(candidatePoint.x, candidatePoint.y) - 
							Point(trackedPoint.x, trackedPoint.y)
						);

                        if (distance < TRACKED_POINT_DISTANCE_THRESHOLD) {

                            // Match found. Update point boundary box.
                            match = true;
                            points[pointIndex].x = trackedPoint.x;
                            points[pointIndex].y = trackedPoint.y;
                            points[pointIndex].color = trackedPoint.color;

                            points[pointIndex].orientation = 
								trackedPoint.orientation;

                            points[pointIndex].boundingBoxP1 = 
								Point(trackRect.x + 
									  trackedPoint.boundingBoxP1.x,
									  trackRect.y + 
									  trackedPoint.boundingBoxP1.y
								);

                            points[pointIndex].boundingBoxP2 = 
								Point(trackRect.x + 
									  trackedPoint.boundingBoxP2.x,
									  trackRect.y + trackedPoint.boundingBoxP2.y
                                );

                            points[pointIndex].boundingBoxColor = 
								trackedPoint.boundingBoxColor;

                            // Increate point ROI hit count.
                            points[pointIndex].roiHits += 
								(points[pointIndex].roiHits < 
									TRACKED_POINT_HIT_UPPER_LIMIT ? 1 : 0);
                        }
                    
                    }
					timer.stopTimer(); // analyseCandidatePoints Timer

                    // No point tracked is close enough to the point that 
					// generated the ROI.
                    if (match == false) {
                        points[pointIndex].roiHits -= 1;
                    }

                    // The tracked points are no longer needed.
                    tempPoints.clear();

                } else {
                    // No candidate point has been found.
                    points[pointIndex].roiHits -= 1;
                }
            }
            
            // Clear points with low hit count.
            for (pointIndex = 0; pointIndex < points.size(); pointIndex++) {
                if (points[pointIndex].roiHits < 
					TRACKED_POINT_CLEAR_THRESHOLD) {
                    points.erase(points.begin()+pointIndex);
                }
            }

            // Disable tracking if there are no points left.
            if (points.size() == 0) {
                enableTracking = false;
            }
        }
        
		// ---------------------------------------------------------------------
		// TRACKING == FALSE
		// ---------------------------------------------------------------------
        if (enableTracking == false) {
            // Extract the region of interest, suavize using blur, increase 
			// brightness and blue color scale value.

            // Return copies of the processed image in grayscale and HSV.
			timer.startTimer("prepareFrame");
            prepareFrame(image, img, imgGray, imgHSV, 
						 IMAGE_HEIGHT_FACTOR, true);
			timer.stopTimer();

            // Apply ddaptive threshold. Dilate, no erode.
			timer.startTimer("applyThreshold");
            applyThreshold(imgGray, 1, 0);
			timer.stopTimer();

            // Run blob detection.
			timer.startTimer("prepareBlobDetection");
            prepareBlobDetection(img, imgHSV, imgGray, image, fileIndex,
								 &scanPoints);
			timer.stopTimer();

            // Merge tracked points and new ones.
            points.insert(points.end(), scanPoints.begin(), scanPoints.end());
            scanPoints.clear();
        }
        
        if (points.size() > 0) {

			timer.startTimer("finalBoundingBoxes");
            for (blobIndex = 0; blobIndex < points.size(); blobIndex++) {
                
                // Merge points that are too close to each other.
                for (cmpIndex = blobIndex+1; 
					 cmpIndex < points.size(); 
				     cmpIndex++) {

                    double distance = 
						norm(Point(points[blobIndex].x, points[blobIndex].y) - 
							 Point(points[cmpIndex].x, points[cmpIndex].y)
							);

                    if (distance < TRACKED_POINT_DISTANCE_THRESHOLD) {
                        points[blobIndex].roiHits += 
							abs(points[cmpIndex].roiHits);

                        points[blobIndex].roiHits = 
							(points[blobIndex].roiHits <= 
							 TRACKED_POINT_HIT_UPPER_LIMIT ?
								points[blobIndex].roiHits : 
								TRACKED_POINT_HIT_UPPER_LIMIT);

                        points.erase(points.begin()+cmpIndex);
                        cmpIndex--;
                    }
                }
                
                // Calculate ROI around candidate point.
                candidatePoint = points[blobIndex];
                trackRect = calculateROIforCandidatePoint(candidatePoint, 
														  image.size());

                if (trackRect.width > 0 && trackRect.height > 0) {
                    
                    if (visualAidsOn) {
                        char message[] = "00\0";
                        if (candidatePoint.roiHits < 0) {
                            message[0] = '-';
                            message[1] = '0' + (abs(candidatePoint.roiHits)%10);
                        }else if (candidatePoint.roiHits < 10) {
                            message[0] = '0';
                            message[1] = '0' + (candidatePoint.roiHits%10);
                        }else{
                            message[0] = '0' + (candidatePoint.roiHits/10);
                            message[1] = '0' + (candidatePoint.roiHits%10);
                        }

                        putText(
							image, 
							message, 
							cvPoint(trackRect.x-12, trackRect.y-10), 
							CV_FONT_HERSHEY_COMPLEX_SMALL, 
							0.8, cvScalar(0, 0, 255), 1, CV_AA
						);

                        rectangle(image, trackRect, Scalar(255, 255, 255));
                    }
                    
                }
                
            }
		
			timer.stopTimer(); // finalBoundingBoxes Timer

            enableTracking = true;            
        }
      
		// Draw Traffic Lights on the bottom of the final image
		timer.startTimer("finalImagePrepare");	
        vector<Semaphore> semaphores;

        for (pointIndex = 0; pointIndex < points.size(); pointIndex++) {
            if (points[pointIndex].roiHits >= SEMAPHORE_DRAW_THRESHOLD) {
                Semaphore semaphore;
                semaphore.x = points[pointIndex].x;
                semaphore.color = (Color)points[pointIndex].color;
                semaphore.orientation = 
					(Orientation)points[pointIndex].orientation;
                semaphores.push_back(semaphore);
            }
        }
        drawSemaphoreHUD(image, semaphores);
		timer.stopTimer();
        
		timer.startTimer("finalImageShow");
        //imshow("Detected", img);
        imshow("Tracker ROI", image);
		timer.stopTimer();
        
		// User feedback
       	#ifdef WAIT_FOR_USER
			if (skipCount == 0) {
		        int key = waitKey();
		        printf("key %i\n", key);
		        if (key == 'a') {
		            skipCount++;
		        }
		    } else {
		    	skipCount = (skipCount+1)%30;
		    }
       	#else
			waitKey(refreshRate);
		#endif

		printf(".");
    }

	timer.computeTime();
	timer.finishTimers();

    return 0;
}
